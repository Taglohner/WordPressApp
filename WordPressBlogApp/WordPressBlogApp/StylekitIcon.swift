//
//  StylekitIcon.swift
//  (null)
//
//  Created by Steven Taglohner on 10/09/2017.
//  Copyright Â© 2017 (null). All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StylekitIcon : NSObject {

    //// Cache

    private struct Cache {
        static var imageOfBookmarkCanvas: UIImage?
        static var bookmarkCanvasTargets: [AnyObject]?
    }

    //// Drawing Methods

    @objc dynamic public class func drawBookmarkCanvas(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 45, height: 45), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 45, height: 45), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 45, y: resizedFrame.height / 45)


        //// Color Declarations
        let fillColor = UIColor(red: 0.988, green: 0.488, blue: 0.258, alpha: 1.000)

        //// bookmarkIcon Drawing
        let bookmarkIconPath = UIBezierPath()
        bookmarkIconPath.move(to: CGPoint(x: 23.47, y: 33.19))
        bookmarkIconPath.addCurve(to: CGPoint(x: 23.93, y: 33.32), controlPoint1: CGPoint(x: 23.63, y: 33.19), controlPoint2: CGPoint(x: 23.79, y: 33.23))
        bookmarkIconPath.addLine(to: CGPoint(x: 33.25, y: 39.32))
        bookmarkIconPath.addLine(to: CGPoint(x: 33.25, y: 4.69))
        bookmarkIconPath.addLine(to: CGPoint(x: 13.69, y: 4.69))
        bookmarkIconPath.addLine(to: CGPoint(x: 13.69, y: 39.32))
        bookmarkIconPath.addLine(to: CGPoint(x: 23.01, y: 33.32))
        bookmarkIconPath.addCurve(to: CGPoint(x: 23.47, y: 33.19), controlPoint1: CGPoint(x: 23.15, y: 33.23), controlPoint2: CGPoint(x: 23.31, y: 33.19))
        bookmarkIconPath.close()
        bookmarkIconPath.move(to: CGPoint(x: 34.1, y: 41.72))
        bookmarkIconPath.addCurve(to: CGPoint(x: 33.64, y: 41.58), controlPoint1: CGPoint(x: 33.94, y: 41.72), controlPoint2: CGPoint(x: 33.78, y: 41.67))
        bookmarkIconPath.addLine(to: CGPoint(x: 23.47, y: 35.04))
        bookmarkIconPath.addLine(to: CGPoint(x: 13.3, y: 41.58))
        bookmarkIconPath.addCurve(to: CGPoint(x: 12.44, y: 41.62), controlPoint1: CGPoint(x: 13.04, y: 41.75), controlPoint2: CGPoint(x: 12.71, y: 41.76))
        bookmarkIconPath.addCurve(to: CGPoint(x: 12, y: 40.87), controlPoint1: CGPoint(x: 12.17, y: 41.47), controlPoint2: CGPoint(x: 12, y: 41.18))
        bookmarkIconPath.addLine(to: CGPoint(x: 12, y: 3.85))
        bookmarkIconPath.addCurve(to: CGPoint(x: 12.85, y: 3), controlPoint1: CGPoint(x: 12, y: 3.38), controlPoint2: CGPoint(x: 12.38, y: 3))
        bookmarkIconPath.addLine(to: CGPoint(x: 34.1, y: 3))
        bookmarkIconPath.addCurve(to: CGPoint(x: 34.95, y: 3.85), controlPoint1: CGPoint(x: 34.57, y: 3), controlPoint2: CGPoint(x: 34.95, y: 3.38))
        bookmarkIconPath.addLine(to: CGPoint(x: 34.95, y: 40.87))
        bookmarkIconPath.addCurve(to: CGPoint(x: 34.5, y: 41.62), controlPoint1: CGPoint(x: 34.95, y: 41.18), controlPoint2: CGPoint(x: 34.78, y: 41.47))
        bookmarkIconPath.addCurve(to: CGPoint(x: 34.1, y: 41.72), controlPoint1: CGPoint(x: 34.38, y: 41.69), controlPoint2: CGPoint(x: 34.24, y: 41.72))
        bookmarkIconPath.close()
        bookmarkIconPath.usesEvenOddFillRule = true
        fillColor.setFill()
        bookmarkIconPath.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    @objc dynamic public class var imageOfBookmarkCanvas: UIImage {
        if Cache.imageOfBookmarkCanvas != nil {
            return Cache.imageOfBookmarkCanvas!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 45, height: 45), false, 0)
            StylekitIcon.drawBookmarkCanvas()

        Cache.imageOfBookmarkCanvas = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfBookmarkCanvas!
    }

    //// Customization Infrastructure

    @objc @IBOutlet dynamic var bookmarkCanvasTargets: [AnyObject]! {
        get { return Cache.bookmarkCanvasTargets }
        set {
            Cache.bookmarkCanvasTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: StylekitIcon.imageOfBookmarkCanvas)
            }
        }
    }




    @objc(StylekitIconResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
